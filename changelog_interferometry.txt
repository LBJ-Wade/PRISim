From 5f81c08 (delay-transform):
==============================

In delay_spectrum.py,

(*) Add and initialize attributes cc_skyvis_lag, cc_skyvis_res_lag, 
cc_skyvis_net_lag, cc_vis_lag, cc_vis_res_lag, cc_vis_net_lag, 
cc_skyvis_freq, cc_skyvis_res_freq, cc_sktvis_net_freq, cc_vis_freq,
cc_vis_res_freq, cc_vis_net_freq, clean_window_buffer in __init__()
member function of class DelaySpectrum
(*) Add descriptions of newly added attributes in docstring of class
DelaySpectrum
(*) Add save() member function (with docstring) to class
DelaySpectrum. Update docstring of class DelaySpectrum accordingly

From 2b0c750 (delay-transform):
==============================

In delay_transform.py,

(*) Add input keyword downsample to member function delay_transform()
of class DelaySpectrum. Update docstring accordingly
(*) Downsampling in member function delay_transform() of class
DelaySpectrum is done depending on keyword input downsample
(*) Add member function clean() to class DelaySpectrum. Update
docstrings accordingly
(*) Add a global function _gentle_clean() for delay deconvolution
which automatically decides where the relative levels of inside and
outside residuals are to decide the stopping criterion. Needs a
docstring, currently has none
(*) Add member functions get_horizon_delay_limits() and
set_horizon_delay_limits() (with docstrings) to class DelaySpectrum.
Update docstring of class DelaySpectrum accordingly
(*) Add and initialize attribute horizon_delay_limits in __init__()
member function of class DelaySpectrum. Update docstring of class
DelaySpectrum accordingly

In baseline_delay_horizon.py,

(*) Add function horizon_delay_limits() (with docstring) to estimate
the horizon delay limits for given baselines and given phase centers
(*) Update docstring of delay_envelope()

From 0a469aa (delay-transform):
==============================

(*) Add delay_spectrum.py module to git repo

In delay_spectrum.py,

(*) Add class DelaySpectrum (with attributes and member functions)
along with docstring
(*) Add member functions __init__() and delay_transform() along with
docstrings under class DelaySpectrum

From 5f025c8 (vis-debug):
========================

(*) Add YAML based visibility delay CLEAN script to git repo

In interferometer_array_data_simulation.yaml.mpi.py,

(*) Add ability to use chromatic or achromatic beams while using
external beams

In simparameters.yaml,

(*) Add inputs for specifying usage of chromatic or achromatic beams

From 4c7ba61 (master) + 755ef77 (healpix_pbeam):
===============================================

(*) Merge healpix_pbeam branch onto master

From e13fa00 (branch vis-debug):
===============================

In interferometry.py,

(*) Determine visibility weights per frequency channel instead of
an average frequency in observe() member function of class
InterferometerArray

From 7f46bcc (branch vis-debug):
===============================

In interferometry.py,

(*) Calculate visibility weights differently from source FWHM widths
in observe() member function of class InterferometerArray

In interferometer_array_data_simulation.yaml.mpi.py and
simparameters.yaml,

(*) Change variables n_snaps and t_snap respectively to n_acc and t_acc

From a0fca58 (branch vis-debug):
===============================

(*) Add MIT license in LICENSE.txt and add to git repo

From 2669b7f (branch vis-debug2):
================================

In interferometry.py,

(*) Determine visibility weights per frequency channel instead of
an average frequency in observe() member function of class
InterferometerArray

From 2bd2b1a (branch healpix_pbeam):
===================================

(*) Intermediate commit before starting new branch

From a0fca58 (branch healpix_pbeam):
===================================

(*) In simulator, add functionality to parallelize along frequency
axis

In interferometry.py,

(*) Fix bug by changing use of self.channels to self.freq in member
function append_settings() of class ROI_parameters.
(*) Check for emptiness of attribute pinfo before writing it to
FITS file in member function save() of class ROI_parameters.
(*) Update docstring of member function concatenate() of class
InterferometerArray
(*) Add checking to see if delay transform quantities exist before
concatenating them in concatenate() member function of class
InterferometerArray

From c5cb9fe (branch timing):
============================

In the 'main' simulator code,

(*) Add definition of a sidereal day and adjust conversions between
actual time and sidereal time using this factor

From d568d1b (branch timing):
============================

In interferometry.py,

(*) Type check for timestamps in save() member function of class
InterferometerArray and save it in appropriate format
(*) Import distutils for version checking of Astropy modules
(*) Add global function _astropy_columns() (only for internal use) to
check for Astropy version and create the FITS column data
appropriately
(*) Import psutil and comment out import of os module
(*) Obtain available memory using psutil routines which replaces the
use of os.popen() inside observe() member function. Comment out the
use of os.popen() 

From 5724828 (branch timing):
============================

In interferometry.py,

(*) Add more precision to timestamps saved in member function
save() of class InterferometerArray

From 2e0aca5 (branch timing):
============================

In interferometry.py,

(*) Fix bug in creating a record array of labels in member
function save() of class InterferometerArray
(*) Add input keyword do_delay_transform to member function
phase_centering() of class InterferometerArray which will
optionally recompute delay transform of the visibilities after they
are rotated to the new phase center

From 19bea28 (branch timing):
============================

In simparameters.yaml,

(*) Make changes to initial conditions of drift and tracking
pointing parameters

In interferometer_array_data_simulation.yaml.mpi.py,

(*) Import ephem module
(*) Modify inputs to handle timing and timestamps tied to the
longitude of the observatory
(*) Needs more rigorous testing on accuracy of timing as well as
making the change consistent throughout the simulation script.
(*) Test to work for automated drift and track runs

From 30bc19a of Interferometry:
==============================

In interferometry.py,

(*) Initialize longitude in __init__() member function of class
ROI_parameters
(*) Save longitude information in save() member function of
class ROI_parameters
(*) Initialize longitude in __init__() member function of class
InterferometerArray
(*) Save longitude information in save() member function of
class InterferometerArray

From 30b511a of Interferometry:
==============================

In interferometry.py,

(*) Initialize latitude in __init__() member function of class
ROI_parameters
(*) Remove latitude keyword input to member function append_settings()
of class ROI_parameters
(*) Change all occurrences of latitude to key 'latitude' of dictionary
attribute telescope of instance ROI_parameters
(*) No default latitude for instances of class ROI_parameters while
docstring indicated VLA latitude will be used as default. Change
docstring accordingly
(*) Save latitude information in save() member function of
class ROI_parameters

From c802b72 of Interferometry:
==============================

(*) Add main programs EoR_and_foregrounds_snapshot_delay_spectra.py,
skymodel_manager.py. The latter converts sky models in (non-)HEALPIX
format(s) to HEALPIX format

(*) Fix major bug in
interferometer_array_theory_units_figures_producer.py where healpy
module's cartview() function returned a map in 'ecliptic' coordinates
rather than in 'equatorial' coordinates. Fix this by setting input
parameter coord in cartview() to 'C' instead of 'E' (happening earlier)

From e874d67 of Interferometry:
==============================

In interferometry.py,

(*) Add member function multi_window_delay_transform() to class
InterferometerArray

From ec3f10a of Interferometry:
==============================

(*) Add EoR signal simulation in main level programs. No change in
modules

From d26fe5d of Interferometry:
==============================

(*) Further testing of main level programs. No change in modules

From e04fcb0 of Interferometry:
==============================

(*) Develop some preliminary global EoR codes
(*) Start developing yaml-based input parameters file for simulations

From 1381c2e of Interferometry:
==============================

In interferometry.py,

(*) Update docstring of class InterferometerArray

From 0de453c of Interferometry:
==============================

In interferometry.py,

(*) In __init__() member function of class InterferometerArray,
modify initialization of attribute labels from init_file as a list of
tuples
(*) In save() member funciton of class InterferometerArray, add
extension name for primary HDU as 'PRIMARY'
(*) In save() member function of class InterferometerArray, write
Tsys without checking conditions of its existence

From 8dc191c of Interferometry:
==============================

In interferometry.py,

(*) Modify save() member function of class InterferometerArray to
handle baseline labels as a list of tuples which now saves it in two
columns

From 2873037 of Interferometry:
==============================

In interferometry.py,

(*) In baseline_generator(), return antenna_pairs as a numpy record or
structured array of tuples under fields 'A1' and 'A2'
(*) Change docstring accordingly

From 402fde6 of Interferometry:
==============================

In interferometry.py,

(*) Add member function conjugate() to class InterferometerArray

From c50675c of Interferometry:
==============================

In interferometry.py,

(*) Modify function baseline_generator() to return baseline labels as
tuples made of antenna labels
(*) Remove unwanted commented sections

From d33b4ff of Interferometry:
==============================

In interferometry.py,

(*) Add a function to create circular antenna layout, namely,
circular_antenna_array()

From f36d152 of Interferometry:
==============================

In interferometry.py,

(*) In member function save() of class ROI_parameters, rename input
parameter file to outfile in order to not confuse with in-built python
variable 'file'
(*) In member function __init__() of class ROI_parameters, modify to
read pointing center information which was getting skipped earlier

From 1d6d03d of Interferometry:
==============================

In primary_beams.py,

(*) Add keyword input short_dipole_approx to dipole_field_pattern()
and primary_beam_generator()
(*) Change docstrings accordingly

From 13bb741 of Interferometry:
==============================

In primary_beams.py,

(*) Add keyword input parameter half_wave_dipole_approx to
primary_beam_generator(). Change code and docstring accordingly

From 9743a28 of Interferometry:
==============================

In interferometry.py,

(*) In member function save() of class InterferometerArray, rename input
parameter file to outfile in order to not confuse with in-built python
variable 'file'
(*) In member function concatenate() of class InterferometerArray,
concatenate attribute projected_baselines which was not done earlier
(*) In save() member function of class ROI_parameters, add field
EXTNAME='PRIMARY' to the primary header extension while writing out the
information to FITS file on disk

In primary_beams.py,

(*) Use correct max value of ground_pattern instead of a fixed value 2

From c13ae50 of Interferometry:
==============================

Add new main programs to git version control

In interferometry.py,

(*) In append_settings() member function of class ROI_parameters,
force primary beam storage to be of type float32 to save memory

From 0d217a8 of Interferometry:
==============================

In interferometry.py,

(*) In antenna_power(), move 'element_locs' from being a key under
dictionary pinfo to that under dictionary telescope
(*) Test these changes in branch phased_array by adjusting main
programs. Find them to be compatible after adjustments.

From dc7db1e of Interferometry:
==============================

In interferometry.py,

(*) In class ROI_parameters, move key 'element_locs' from being a ley
in dictionary pointing_info to that in dictionary telescope in both
class attribute and input parameter in member function append_settings()
(*) Make changes accordingly in member functions __init__(),
append_settings() and save()
(*) Change docstring accordingly

From 31d7cc4 of Interferometry:
==============================

In primary_beams.py,

(*) In primary_beam_generator(), move 'element_locs' from being a key
in input parameter dictionary pointing_info to being a key in input
parameter dictionary telescope.
(*) Change docstring accordingly.

In interferometry.py,

(*) Fix a bug in antenna_power() where 'element_locs' for phased array
power pattern computation was not being used and therefore was not
functional.
(*) Change docstring accordingly

From 61fd4c9 of Interferometry:
==============================

In interferometry.py,

(*) Create docstring for antenna_power()

From c1e0049 of Interferometry:
==============================

In interferometry.py,

(*) Make uniq_baselines() also return indices of selected baselines.
Change docstring accordingly
(*) Make hexagon_generator() also return antenna identifiers. Change
docstring accordingly

From b1ebe5c of Interferometry:
==============================

In interferometry.py,

(*) Enhance functionality of uniq_baselines() by returning the count of 
unique, redundant or non-redundant baselines as applicable 
(*) Change docstring of uniq_baselines() accordingly

From 0cbdd7d of Interferometry:
==============================

In interferometry.py,

(*) Make unique baseline estimation more accurate in uniq_baselines()
(*) Adjust code to handle updates to Astropy while saving to FITS files

From b4ce5b4 of Interferometry:
==============================

In interferometry.py,

(*) Add new function antenna_power() to compute antenna power after 
integrating a sky model over the sky weighted by the power pattern

In primary_beams.py,

(*) Fix a bug in array_field_pattern() by specifying nrand=1 when nrand 
not provided in input parameter dictionary pointing_info
(*) Modify docstring of primary_beam_generator() slightly

From 22710be of Interferometry:
==============================

In interferometry.py,

(*) Rename catalog module alias from CTLG to SM
(*) Rename sky model class SkyModel_new to SkyModel to reflect changes in 
catalog module
(*) Adapt main programs to be compatible with these changes

From ea35571 of Interferometry:
==============================

In interferometry.py,

(*) Remove useless commented lines in class InterferometerArray
(*) Comment out the defunct class Interferometer

From 8c14608 of Interferometry:
==============================

Note that 8c14608 was a redundant commit with no substantial changes from 
the previous commit e41a005

In interferometry.py,

(*) Adapt classes ROI_parameters and InterferometerArray to be compatible while
using the modified module catalog by replacing the use of classes Catalog and 
SkyModel with SkyModel_new
(*) Adapt main programs to be compatible with above changes

From 2a6938b of Interferometry:
==============================

In primary_beams.py,

(*) Add random realization capability for delays and gains in the settings of
the beamformer in array_field_pattern()
(*) change docstring accordingly
(*) Change primary_beam_generator() to be compatible with the change above 

From bc17d44 of Interferometry:
==============================

In primary_beams.py,

(*) Remove input parameters gains and gainerr and make them as part of input
dictionary parameter pointing_info in array_field_pattern()
(*) Change docstring of array_field_pattern() accordingly
(*) Modify primary_beam_generator() to pass gain and gainerr as part of a
dictionary to array_field_pattern() instead of as individual input parameters

From c28f55a of Interferometry:
==============================

In primary_beams.py,

(*) Modify array_field_pattern() to take and process input parameter specifying 
gain errors. 
(*) Modify primary_beam_generator() to pass input parameter specifying gain
errors
(*) Update docstrings accordingly
(*) Adapt MWA_interferometer_array_observing_run_data_simulation.mpi.py to make
use of the input parameter gainerr

From c1d5cb5 of interferometry:
==============================

In interferometry.py,

(*) Adjust code to handle updates to Astropy while saving to FITS files

From cd410da of interferometry:
==============================

In interferometry.py,

(*) Remove the undeveloped function antenna_generator() 
(*) Add a new function hexagon_generator() which will generate antenna 
locations on a hexagnal grid
(*) Fix a bug in baseline_generator() when the input antenna 
locations only have x and y but no z component.
(*) Add a new function uniq_baselines() that can determine all the
unique or only redundant or only non-redundant baselines from any given
set of baselines

From 1509599 of interferometry:
==============================

In primary_beams.py,

(*) Fixed a major bug in the usage of diameter in the expression for an airy
pattern in airy_disk_pattern()
(*) Fixed a bug in primary_beam_generator() where frequency input parameter
even if supplied as a scalar is converted to an array
(*) Fixed a bug in primary_beam_generator.py where in the call to 
dipole_field_pattern(), dipole_coords was being passed as 'dircos' instead of, 
more generally, the value of the key 'occords' in dictionary telescope
(*) Ensured ground plane computation does not happen for a dish shaped antenna
element in primary_beam_generator()
(*) Ensured that the beam pattern for points outside the horizon are forced to
zero in airy_disk_pattern()

(*) Fixed a bug where A_eff estimate was the same for most antenna shapes 
independent of their size.

from d703b37 of interferometry:
============================== 

In interferometry.py,

(*) Fixed a bug to check if key 'id' is present in attribute telescope before
computing primary beam in member function append_settings() of class
ROI_parameters

In primary_beams.py,

(*) Removed reference of ground plane in the call to dipole_field_pattern()
while using telescope id = 'mwa_dipole'. This is because ground plane pattern
effect has been detached from dipole field pattern
(*) Fixed bugs when telescope is set to mwa_dipole in primary_beam_generator()

from 9618b44 of interferometry:
===============================

In interferometry.py,

(*) Changed object class definition of class ROI_parameters and
InterferometerArray to have the modern definition instead of the old one. In 
other words, they now inherit from Python's default "object"

from v1.07 of interferometry:
============================

In interferometry.py,

(*) Added a member function project_baselines() to class InterferometerArray. 
This projects baseline vectors with respect to a specified direction on the sky.
(*) Modified save() member function of class InterferometerArray to write out
projected baselines
(*) Modified __init__() member function of class InterferometerArray to read in
projected baselines from the FITS file as well as initialize it to None if not
initialized from init_file. Modified docstring accordingly
(*) Modified docstring of class InterferometerArray about description and usage
of new member function project_baselines()
(*) Modified docstring of class InterferometerArray about description and usage
of new attribute projected_baselines

from v1.06 of interferometry:
============================

In interferometry.py,

(*) Added a comment to docstring of class Interferometer that it is defunct and
to use class InterferometerArray instead
(*) In the __init__() member function of class InterferometerArray, changed the
assignment of 'jy' to attribute flux_unit which was previously wrongly assigned
to attribute skycoords
(*) Added a new class ROI_parameters that stores the information on skymodel 
along with the region of interest and primary beams across different snapshots.
This is to save redundant computations inside observe() member function of class
InterferometerArray
(*) Modified observe() member function of class InterferometerArray to use
pre-computed values for regions of interest and the corresponding primary beams
for the foreground model such as the information provided by instances of class
ROI_parameters. If these pre-computed values are not provided in input keyword
parameter roi_info, the regions of interest and corresponding primary beams are
estimated inside the member function. The input keywrod parameter pb_info is used
to estimate the primary beam values for the regions of interest. Changed the
docstring accordingly.
(*) Modified __init__() member function of class InterferometerArray to
initialize attribute telescope to a dictionary instead of string. This can be
done both from an init file as well as from input parameters supplied to
__init__(). Changed docstring accordingly.
(*) Modified save() member function of class InterferometerArray to write the
dictionary attribute telescope into the FITS file.
(*) In class InterferometerArray, changed docstring to accommodate the use of a
dictionary inside the keyword input 'telescope' under key named 'ground_modify'
which will be used when involing ground_plane_field_pattern(). 
(*) Updated docstring of class InterferometerArray to reflect updates on
member functions generate_noise(), add_noise(), phase_centering(),
delay_transform(), concatenate(), and save() which should have been done in 
earlier revisions but wasn't. 
(*) Remove from docstring of class InterferometerArray references to a 
non-existing member function noise_estimate()
(*) In __init__() member function of class InterferometerArray, modified the
docstring to describe the input parameter init_file.
(*) Made very minor changes to docstring of member function save() of class
InterferometerArray

In primary_beams.py,

(*) Added a new function array_field_pattern() that computes the field pattern
given beamformer delays or pointing center. The array of antenna elements could
be of any arbitrary shape. This beamforming will supercede
isotropic_radiators_array_field_pattern() in functionality because any array 
shape can be simulated (including delay jitter effects) but may be slower than
isotropic_radiators_array_field_pattern() due to lack of an analytical formula
and if the number of sky positions are large.
(*) Fixed a bug in dipole_field_pattern() in the formula for field pattern 
without half wave dipole approximation. Changed the argument of a cosine function
from arg1 * arg2 to arg1 * cos(arg2).
(*) In dipole_field_pattern(), replaced arg1 and arg2 with actual variables and
implemented numpy array broadcasting
(*) In dipole_field_pattern(), default value of dipole_orientation was set to
None, but had actually did not set any default orientation. Now the default None
sets the dipole orientation along east. Changed docstring accordingly.
(*) Moved the computation of ground plane effect from inside
dipole_field_pattern() to a separate function ground_plane_field_pattern().
Modified inputs and docstring accordingly. 
(*) New function ground_plane_field_pattern() created to estimate the ground 
plane effects independently rather than computing it alongside the dipole field
pattern.
(*) In primary_beam_generator(), for MWA and MWA_dipole, changed the default of
keyword half_wave_dipole_approx from True to False.
(*) In primary_beam_generator(), for MWA, modified the inputs to have a keyword 
input pointing_info which contains information about the pointing center, delay
settings, element locations, etc. in accordance with the requirements for 
array_field_pattern(). If these inputs are provided, array_field_pattern() is
preferred over isotropic_radiators_array_field_pattern() in the case of MWA. 
Modified the docstring accordingly.
(*) In primary_beam_generator(), changed the input parameter telescope from 
holding a string to a dictionary which defines the antenna element properties.
The key 'id' can be used to use default values for known telescopes. If 'id' is
not specified, element properties such as shape, size and orientation can be used
to compute the element pattern. Changed the docstring accordingly.
(*) In primary_beam_generator(), call to airy_disk_pattern() for a HERA dish had
skyunits hard-coded to 'altaz' which has now been replaced with generic skyunits.
(*) In airy_disk_pattern(), changed variables 'qty' and 'ef' to 'pattern' and
removed numpy copies.
(*) In ground_plane_field_pattern(), added a keyword input named 'modifier' that
contains specifications to modify the generated ground plane pattern. Changed
docstring accordingly.
(*) In primary_beam_generator(), changed docstring to accommodate the use of a
dictionary inside the keyword input 'telescope' under key named 'ground_modify'
which will be used when involing ground_plane_field_pattern(). 
(*) In ground_plane_field_pattern(), changed the inner argument of the analytical 
expression from cos(90-altitude) to sin(altitude) to be consistent with EM texts
such as Jordan & Balmain.

---------------------------------------------------------------------------------
from v1.05 of interferometry:
============================

In primary_beams.py,

(*) In primary_beam_generator(), changed the default MWA dipole length to 0.74 m
from 1.1 m. 
(*) In primary_beam_generator(), if the telescope value is set to 'mwa_dipole', 
a default ground plane height of 0.3 m is used in the call to the dipole field
pattern. This does not apply if the telescope is anything other than 
'mwa_dipole'. 0.3 m was arrived at by using 10 cm elevation above the ground and
40 cm is the vertical height of the bowtie antenna and hence 20 cm is the 
half-height. Thus the the center of the antenna is 30 cm above the ground plane.
(*) In dipole_field_pattern(), corrected the expression for ground plane effect 
from cos(sin) to sin(cos). This now ensures that the gain is zero at the horizon.
(*) In dipole_field_pattern(), max_pattern is set to 2.0 if computing ground 
plane effect.

---------------------------------------------------------------------------------
from v1.05 of interferometry:
============================

In primary_beams.py,

(*) Added a new function to compute airy disk patterns of uniformly illuminated
circular disks. The funciton is named airy_disk_pattern()
(*) Modified primary_beam_generator() to accept 'hera' for telescope input and 
compute the primary beam using the newly added airy_disk_pattern()
(*) Replaced the use of variable phase_center in all routines with 
pointing_center.

In baseline_delay_horizon.py,

(*) Changed docstring of delay_envelope() to indicate that maximum delay is 
given by [:,:,0]-[:,:,1]

In interferometery.py,

(*) In baseline_generator(), added an input keyword ant_id to keep track of
antennas in the baseline vectors. The output now also contains ids of the 
antenna pair. Docstring changed accordingly
(*) In baseline_generator(), when antenna locations are specified as a numpy
array, baselines were calculated as i-j for j > i. THis is inconsisntent with
baselines if the input was a list of lists where baseliens were calculated as 
j-i for j > i. Now they are all made consistent with j-i for j>i.
(*) Added Tsys initialization from init_file in __init__() member function of
class InterferometerArray
(*) Added a new attribute lag_psf that denotes the inverse fourier transform of
bandpass shape to class InterferometerArray. It is initialized in __init__()
member function and computed in member function delay_transform(). It is saved
using save() member function
(*) Added description of attribute bp_wts to docstring of class
InterferometerArray which was not done earlier
(*) Modified delay_transform() member function of class InterferometerArray to
have output in units of Jy Hz instead of Jy as before. This was done by 
multiplying the IFFT by number of frequency channels (including padded channels, 
if any) and the frequency resolution. This automatically makes the amplitude
invariant to padding and hence no need to correct for amplitudes due to padding
factor at the downsampling step. Hence, the amplitude correction introduced in 
the previous version is now removed.
(*) Replaced use of phase_center in calling primary_beam routines with 
pointing_center to reflect the same changes made in the primary_beam routines.

---------------------------------------------------------------------------------
from v1.04 of interferometry:
============================

In interferometry.py,

(*) Removed the unused attribute sample_density from member function __init__()
of classes Interferometer and InterferometerArray
(*) Added two member functions generate_noise() and add_noise() which generate 
and add noise to the sky visibilities under class InterferometerArray
(*) Removed the computation and addition of noise on visibilities in observe()
member function of class InterferometerArray and moved it to member functions
generate_noise() and add_noise() respectively
(*) Removed a factor 2 while estimating memory_required in member function
observe() of class InterferometerArray. This means size of vis_wts is ignored
since it anyway follows numpy array broadcasting rule
(*) Removed a factor 2 while estimating the downsize_factor if memory shortage 
is detected in observe() member function of class InterferometerArray
(*) memory_required in member function observe() of class InterferometerArray is
now estimated from free+cached+buffer memory instead of only from free memory
(*) In member function delay_transform() of class InterferometerArray, changed
the delay transform to be IFFT instead of FFT to be consistent with the sign 
convention used in creating the visibilities along frequency axis in member 
function observe() and docstring changed accordingly
(*) In member function delay_transform() of class InterferometerArray, replaced
len(self.timestamp) with self.n_acc
(*) In member function save() of class InterferometerArray, now write another
extension to the FITS file containing Tsys information.
(*) In member function save() of class InterferometerArray, now write another
extension to the FITS file containing timestamp information. Timestamps are now
written as 12-character strings
(*) In member function save() of class InterferometerArray, changed the
formatting of writing the extension table containing labels. Labels are now 
written as 5-character strings
(*) In member function __init__() of class InterferometerArray, made changes to
initialization from init_file so it is compatible with output of save() member 
function.
(*) In member function __init__() of class InterferometerArray, made changes to
data type of attributes vis_freq, skyvis_freq, vis_noise_freq, skyvis_lag, 
vis_lag, and vis_noise_lag so they can hold complex values
(*) In member function delay_transform() of class InterferometerArray, padding
with zeros reduced the amplitude and hence the amplitudes are now corrected 
based on the padding factor
(*) Added attributes phase_center and phase_center_coords to class
InterferometerArray. These are updated accordingly in all the member functions
of this class. By default, these are made equal to the pointing center and 
pointing coordinates.
(*) Added member function phase_centering() to rotate visibility phases to any
given phase center.
(*) Phase center information is now saved in save() member function and also
initialized in __init__() member function through init file in class
InterferometerArray. It is also concatenated in member function concatenate().
(*) In member function concatenate() of class InterferometerArray, added the
concatenation of attribute bp_wts which was missing earlier

In primary_beams.py,

(*) Renamed skyunits to skycoords in the dosctring of
isotropic_radiators_array_field_pattern()  

---------------------------------------------------------------------------------
from v1.03 of interferometry:
============================

In interferometery.py,

(*) Added docstring in class InterferometerArray describing the member function
observing_run()
(*) Made minor corrections in print statements and docstrings inside the class
InterferometerArray to indicate they belong to that class and not the class
Interferoemter.
(*) Enabled __init__() member function of class InterferometerArray to initialize
from data in a file through the input parameter init_file which may have been 
created using the save() member function
(*) In member function save() of class InterferometerArray, now save the
attribute skycoords as a keyword in the primary header.
(*) In member function save() of class InterferometerArray, now save the
attribute keywords bp_wts and labels as separate extensions
(*) Following up with the change in the nature of attribute frequency in class
Catalog in the module catalog.py under the class of "general" modules, its usage
is now modified to reflect its nature as an array in both classes Interferometer
and InterferometerArray
(*) Modified error checking in __init__() member function of class
InterferometerArray to be compatible with initializing from input arguments or 
from init_file
(*) Tweaked a few places in member function observe() of class 
InterferoemterArray to have numpy array broadcasting compatibility
(*) In member function save() of class InterferometerArray, the baseline labels 
are now saved as a binary table extension instead of an image table used before
because the labels are strings.

---------------------------------------------------------------------------------
from v1.02 of interferometry:
============================

In interferometry.py,

(*) In member function observe() of class Interferometer, removed the product by
the bandpass function in determining the sky visibilities and subsequently the
measured visibilities. Instead bandpass is kept seprate and can be modified or
applied as per need.
(*) In member function delay_transform() of class Interferometer, bandpass shape
is multiplied to the visibilities in the frequency domain before computing the
delay transform.
(*) In member function save() of class Interferometer, the bandpass shapes as a
function of snapshot instance and frequency are saved in an extension as an
array.
(*) In member function save() of class Interferometer, the LST and pointing
centers are stored as an extension table
(*) In class Interferometer, added description of member function observing_run()
to the docstring. Renamed mention of noise_estimate() in the docstring of class
Interferometer to band_averaged_noise_estimate()
(*) In class Interferometer, modified the description of class attribute bp in 
the docstring
(*) In class Interferometer's __init__() and observing_run() member functions, 
changed from 'channels *= ...' to 'channels = channels * ...' because the former
modifies the original input argument as well due to passing by reference 
(*) In member function observing_run() of class Interferometer, commented the
usage of milestones and printing of progress percentage and replaced it with use
of the progressbar module.
(*) In member function delay_transform() of class Interferometer, added input 
arguments, namely, pad and verbose to the function. pad provides a padding before
the delay transform and also determines the downsampling factor of the delay
spectrum after the delay transform. Setting verbose prints diagnostic and
progress messages.
(*) Added a new attribute bp_wts to class Interferometer. This attribute is to
serve the purpose of any additional frequency weighting on top of the inherent
bandpass shape, represented by the attribute bp.
(*) Added an input parameter 'freq_wts' to member function delay_transform() of
class Interferometer which denotes the additional frequency weighting to be
applied in additional to the inherent bandpass shape while performing the delay
transform. The attribute bp_wts is assigned with this freq_wts.
(*) Modified member function __init__() of class Interferometer to intialize the
newly included attribute bp_wts
(*) Modified member function observe() of class Interferometer to build a default
set of frequency weights (all unity) and assigned to the attribute bp_wts
(*) Modified the docstrings of class Interferometer to note the inclusion of this
new attribute bp_wts.
(*) Modified member function observe() of class Interferometer to incorporate more
of python numpy concept of broadcasting of arrays 

(*) Added a new class InterferometerArray which is a significant enhancement over
the class Interferometer. The former can handle multiple baselines whereas the 
latter can handle only one baseline at a time. The former also has some memory
optimization strategies built in including the efficient numpy broadcasting of
arrays. In addition, this class is not limited to compact foreground models but
can also handle extended structures by approximating them with circular gaussian
profiles in the image domain and corresponding visibility weights in the aperture 
plane.

(*) From here on, class InterferometerArray supercedes the functionality of class
Interferoemter and hence, the latter will not be developed any further. 

---------------------------------------------------------------------------------
from v1.01 of interferometry:
============================

In primary_beams.py,

(*) Vectorized the routines so a vector of frequencies/wavelengths can be handled
all at once.
(*) Changed docstrings to reflect the vectorized capabilities
(*) Modified isotropic_radiators_array_field_pattern() so it can handle well
numerically angles very close to zero.
(*) Modified primary_beam_generator() to include a telescope system where only a
MWA dipole is used ignoring the dipole array pattern in a tile. 

In interferometry.py,

(*) In member functions observe() and observing_run() of class Interferometer,
renamed the input parameter fov_radius to roi_radius.
(*) In member functions observe() and observing_run() of class Interferometer,
added a new input parameter roi_center which defines the center around which
roi_radius is to be used.
(*) In member function observe() of class Interferometer, replaced temporary
variable ptmp which changes reference from Alt-Az to direction cosines with
two meaningful variables pc_altaz and pc_dircos.
(*) In member function observe() of class Interferometer, replaced usage of 
len(d12) with len(m2) for an easy accommodation of cases where
roi_center='zenith'
(*) In member function observe() of class Interferometer, replaced usage of 
internal variable phase_center with pc_altaz because they are identical and
removed the redundant definition of phase_center
(*) In member function observe() of class Interferometer, replaced usage of 
source_positions with skypos_altaz_roi
(*) In member function observe() of class Interferometer, if input parameter
roi_center is set to 'zenith', the source positions in the catalog are converted
to Alt-Az coordinates and numpy's where() function selects sources in the region
of interest instead of using computationally expensive spherematch() function 
from geometry module. However, in such a scenario, if the catalog's coordinates
are not in Alt-Az coordinate system, every call of observe() will invoke a 
conversion of the entire catalog to Alt-Az coordinate system.
(*) Modified the docstring of member function observe() of class Interferometer
(*) Added docstring to member function observing_run() of class Interferometer
(*) Modified certain parts inside member function observe() of class
interferometer to take advantage of the vectorized primary_beam codes
(*) Added input parameter brightness_temperature to member functions observe()
and observing_run() of class Interferometer to denote the units of flux density
which can now be 'K' (Kelvin) or 'Jy' (Jansky)
(*) Added an attribute flux_unit for class Interferometer which denotes the unit 
of flux density (either 'K' for Kelvin or 'Jy' for Jansky)
(*) Member function save() of class Interferometer saves the attribute flux_unit
onto the header of the output FITS file.
(*) Fixed save() member function of class Interferometer to write out t_acc and
vis_rms_freq by modifying the criterion checking for empty lists
(*) Modified docstring of class Interferometer to indicate that the telescope 
attribute can also be set to 'mwa_dipole' in addition to the already existing
options such as 'vla', 'gmrt', and 'mwa'.

In VLA_simulation.py,

(*) Replaced the occurrence of fov_radius with roi_radius

In MWA_simulation.py,

(*) Replaced the occurrence of fov_radius with roi_radius

In MWA_observing_run_simulation.py,

(*) Replaced the occurrence of fov_radius with roi_radius
(*) Ensured that catalog frequency and observing frequency are passed to the 
observing member function(s) in class Interferometer in the same units

Created a new file observing_run_test_cases.py which simulates many test cases
sampling different parameters such as observing parameters, foreground models, 
etc.


---------------------------------------------------------------------------------
from v1.0 of interferometry:
===========================

In interferometry.py,

(*) Added a member function band_averaged_noise_estimate() to class
Interferometer.
(*) Corrected the thermal noise rms formula. It was missing a square root for 
the observing time and frequency width
(*) Added docstring to the class Interferometer and all its member functions
(*) Removed unused attrbute obs_catalog
(*) Remove unused attribute pb
(*) Ensured that input parameter skymodel to member function observe() of class
Interferometer is an instance of class Catalog.
(*) Remove unused input pb_min to member function observe() of class 
Interferometer
(*) In member function observe(), made a correction to the geometric
transformation from Alt-Az coordinates to HA-Dec by using LST only for the HA
and not on Dec after the altaz2hadec() transformation in the geometry module
(*) Added a member function observing_run() that can simulate an observing run 
in drift or tracking mode.
(*) Added a member function save() to save the interferometer information onto 
a FITS file on disk
(*) Modified attribute tobs to t_acc (accumulation time) and added t_obs to 
denote observing run duration
(*) Added attribute n_acc to denote the number of accumulations
(*) Inserted initializing statements for t_acc, t_obs, and n_acc
(*) Corrected a 'and' to 'or' in the implementation of frequency scale when 
given in Hz.
(*) In call to primary_beam_generator(), also added an argument to specify phase
center (refer to changes in isotropic_radiators_array_field_pattern() in 
primary_beams.py)
(*) Moved the routine baseline_generator from geometry.py to interferometry.py

In primary_beams.py,

(*) Added docstring to all functions
(*) Made corrections to validation of direction cosines in function 
isotropic_radiators_array_field_pattern()
(*) Added capability to include a phase center and compute primary beams 
relative to this phase center. Correspondingly, added another keyword input
phase_center to isotropic_radiators_array_field_pattern() and to
primary_beam_generator()

In baseline_delay_horizon.py,

(*) Changed explanation of the returned variable delaymatrix in the docstring
of delay_envelope() to remove ambiguity

--------------------------------------------------------------------------------
from v1.2 of python-trials:
==========================

In baseline_delay_horizon.py,

(*) changed global c (speed of light) to FCNST.c where FCNST is the
scipy.constants module
