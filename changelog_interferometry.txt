from v1.02 of interferometry:
============================

In interferometry.py,

(*) In member function observe() of class Interferometer, removed the product by
the bandpass function in determining the sky visibilities and subsequently the
measured visibilities. Instead bandpass is kept seprate and can be modified or
applied as per need.
(*) In member function delay_transform() of class Interferometer, bandpass shape
is multiplied to the visibilities in the frequency domain before computing the
delay transform.
(*) In member function save() of class Interferometer, the bandpass shapes as a
function of snapshot instance and frequency are saved in an extension as an
array.
(*) In member function save() of class Interferometer, the LST and pointing
centers are stored as an extension table
(*) In class Interferometer, added description of member function observing_run()
to the docstring. Renamed mention of noise_estimate() in the docstring of class
Interferometer to band_averaged_noise_estimate()
(*) In class Interferometer, modified the description of class attribute bp in 
the docstring
(*) In class Interferometer's __init__() and observing_run() member functions, 
changed from 'channels *= ...' to 'channels = channels * ...' because the former
modifies the original input argument as well. 
(*) In member function observing_run() of class Interferometer, commented the
usage of milestones and printing of progress percentage and replaced it with use
of the progressbar module.
(*) In member function delay_transform() of class Interferometer, added input 
arguments, namely, pad and verbose to the function. pad provides a padding before
the delay transform and also determines the downsampling factor of the delay
spectrum after the delay transform. Setting verbose prints diagnostic and
progress messages.
(*) Added a new attribute bp_wts to class Interferometer. This attribute is to
serve the purpose of any additional frequency weighting on top of the inherent
bandpass shape, represented by the attribute bp.
(*) Added an input parameter 'freq_wts' to member function delay_transform() of
class Interferometer which denotes the additional frequency weighting to be
applied in additional to the inherent bandpass shape while performing the delay
transform. The attribute bp_wts is assigned with this freq_wts.
(*) Modified member function __init__() of class Interferometer to intialize the
newly included attribute bp_wts
(*) Modified member function observe() of class Interferometer to build a default
set of frequency weights (all unity) and assigned to the attribute bp_wts
(*) Modified the docstrings of class Interferometer to note the inclusion of this
new attribute bp_wts.
(*) Modified member function observe() of class Interferometer to incorporate more
of python numpy concept of broadcasting of arrays 

(*) Added a new class InterferometerArray which is a significant enhancement over
the class Interferometer. The former can handle multiple baselines whereas the 
latter can handle only one baseline at a time. The former also has some memory
optimization strategies built in including the efficient numpy broadcasting of
arrays. In addition, this class is not limited to compact foreground models but
can also handle extended structures by approximating them with circular gaussian
profiles in the image domain and corresponding visibility weights in the aperture 
plane.

(*) From here on, class InterferometerArray supercedes the functionality of class
Interferoemter and hence, the latter will not be developed any further. 

---------------------------------------------------------------------------------
from v1.01 of interferometry:
============================

In primary_beams.py,

(*) Vectorized the routines so a vector of frequencies/wavelengths can be handled
all at once.
(*) Changed docstrings to reflect the vectorized capabilities
(*) Modified isotropic_radiators_array_field_pattern() so it can handle well
numerically angles very close to zero.
(*) Modified primary_beam_generator() to include a telescope system where only a
MWA dipole is used ignoring the dipole array pattern in a tile. 

In interferometry.py,

(*) In member functions observe() and observing_run() of class Interferometer,
renamed the input parameter fov_radius to roi_radius.
(*) In member functions observe() and observing_run() of class Interferometer,
added a new input parameter roi_center which defines the center around which
roi_radius is to be used.
(*) In member function observe() of class Interferometer, replaced temporary
variable ptmp which changes reference from Alt-Az to direction cosines with
two meaningful variables pc_altaz and pc_dircos.
(*) In member function observe() of class Interferometer, replaced usage of 
len(d12) with len(m2) for an easy accommodation of cases where
roi_center='zenith'
(*) In member function observe() of class Interferometer, replaced usage of 
internal variable phase_center with pc_altaz because they are identical and
removed the redundant definition of phase_center
(*) In member function observe() of class Interferometer, replaced usage of 
source_positions with skypos_altaz_roi
(*) In member function observe() of class Interferometer, if input parameter
roi_center is set to 'zenith', the source positions in the catalog are converted
to Alt-Az coordinates and numpy's where() function selects sources in the region
of interest instead of using computationally expensive spherematch() function 
from geometry module. However, in such a scenario, if the catalog's coordinates
are not in Alt-Az coordinate system, every call of observe() will invoke a 
conversion of the entire catalog to Alt-Az coordinate system.
(*) Modified the docstring of member function observe() of class Interferometer
(*) Added docstring to member function observing_run() of class Interferometer
(*) Modified certain parts inside member function observe() of class
interferometer to take advantage of the vectorized primary_beam codes
(*) Added input parameter brightness_temperature to member functions observe()
and observing_run() of class Interferometer to denote the units of flux density
which can now be 'K' (Kelvin) or 'Jy' (Jansky)
(*) Added an attribute flux_unit for class Interferometer which denotes the unit 
of flux density (either 'K' for Kelvin or 'Jy' for Jansky)
(*) Member function save() of class Interferometer saves the attribute flux_unit
onto the header of the output FITS file.
(*) Fixed save() member function of class Interferometer to write out t_acc and
vis_rms_freq by modifying the criterion checking for empty lists
(*) Modified docstring of class Interferometer to indicate that the telescope 
attribute can also be set to 'mwa_dipole' in addition to the already existing
options such as 'vla', 'gmrt', and 'mwa'.

In VLA_simulation.py,

(*) Replaced the occurrence of fov_radius with roi_radius

In MWA_simulation.py,

(*) Replaced the occurrence of fov_radius with roi_radius

In MWA_observing_run_simulation.py,

(*) Replaced the occurrence of fov_radius with roi_radius
(*) Ensured that catalog frequency and observing frequency are passed to the 
observing member function(s) in class Interferometer in the same units

Created a new file observing_run_test_cases.py which simulates many test cases
sampling different parameters such as observing parameters, foreground models, 
etc.


---------------------------------------------------------------------------------
from v1.0 of interferometry:
===========================

In interferometry.py,

(*) Added a member function band_averaged_noise_estimate() to class
Interferometer.
(*) Corrected the thermal noise rms formula. It was missing a square root for 
the observing time and frequency width
(*) Added docstring to the class Interferometer and all its member functions
(*) Removed unused attrbute obs_catalog
(*) Remove unused attribute pb
(*) Ensured that input parameter skymodel to member function observe() of class
Interferometer is an instance of class Catalog.
(*) Remove unused input pb_min to member function observe() of class 
Interferometer
(*) In member function observe(), made a correction to the geometric
transformation from Alt-Az coordinates to HA-Dec by using LST only for the HA
and not on Dec after the altaz2hadec() transformation in the geometry module
(*) Added a member function observing_run() that can simulate an observing run 
in drift or tracking mode.
(*) Added a member function save() to save the interferometer information onto 
a FITS file on disk
(*) Modified attribute tobs to t_acc (accumulation time) and added t_obs to 
denote observing run duration
(*) Added attribute n_acc to denote the number of accumulations
(*) Inserted initializing statements for t_acc, t_obs, and n_acc
(*) Corrected a 'and' to 'or' in the implementation of frequency scale when 
given in Hz.
(*) In call to primary_beam_generator(), also added an argument to specify phase
center (refer to changes in isotropic_radiators_array_field_pattern() in 
primary_beams.py)
(*) Moved the routine baseline_generator from geometry.py to interferometry.py

In primary_beams.py,

(*) Added docstring to all functions
(*) Made corrections to validation of direction cosines in function 
isotropic_radiators_array_field_pattern()
(*) Added capability to include a phase center and compute primary beams 
relative to this phase center. Correspondingly, added another keyword input
phase_center to isotropic_radiators_array_field_pattern() and to
primary_beam_generator()

In baseline_delay_horizon.py,

(*) Changed explanation of the returned variable delaymatrix in the docstring
of delay_envelope() to remove ambiguity

--------------------------------------------------------------------------------
from v1.2 of python-trials:
==========================

In baseline_delay_horizon.py,

(*) changed global c (speed of light) to FCNST.c where FCNST is the
scipy.constants module
